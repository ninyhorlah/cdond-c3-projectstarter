version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  node: circleci/node@5.0.2

commands:
  destroy-infrastructure:
    steps:
      - run:
          name: Destroy infrastructure
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  build-frontend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Build frontend 
          command: |
            cd frontend 
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Build backend 
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Test Frontend 
          command: |
            cd frontend 
            npm install 
            npm run test 

  test-backend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Test Backend 
          command: |
            cd backend
            npm install 
            npm run test

  scan-frontend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Scan Frontend
          command: |
            cd frontend
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify: 
          channel: D03F3MZH9QU
          mentions: "@Ninyo"
          template: basic_fail_1
          event: fail

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Scan Backend 
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify: 
          event: fail
          channel: D03F3MZH9QU
          mentions: "@Ninyo"
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Deploy backend infrastructure 
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Deploy frontend infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople

      - run: 
          name: Retrieve backend server ip and add it to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> ~/task/.circleci/ansible/inventory.txt
            cat ~/task/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - task/.circleci/ansible/inventory.txt
      - destroy-infrastructure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ["76:d4:20:2b:5f:62:c5:de:21:90:f8:0c:56:17:1b:f0"]
      - run: 
          name: Setup EC2 instance to run as backend
          command: |



workflows:
  build-project:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend , scan-backend]
            